name: Subida a Producción (Sin Package)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # --------------------- PREPARAR ENTORNO ---------------------
  preparar_entorno:
    concurrency:
      group: produccion
      cancel-in-progress: true
    runs-on: self-hosted
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Ejecutar Maven Clean
        run: mvn -q --batch-mode clean

      - name: Descargar dependencias (Modo Offline)
        run: mvn -q --batch-mode dependency:go-offline

  # --------------------- COMPILAR CÓDIGO ---------------------
  compilar_codigo:
    needs: preparar_entorno
    runs-on: self-hosted
    steps:
      - name: Compilar código
        run: mvn -q --batch-mode compile

  # --------------------- TESTS UNITARIOS ---------------------
  tests_unitarios:
    needs: compilar_codigo
    runs-on: self-hosted
    steps:
      - name: Ejecutar tests unitarios
        run: mvn -q --batch-mode surefire:test

  # --------------------- TESTS DE INTEGRACIÓN ---------------------
  tests_integracion:
    needs: compilar_codigo
    runs-on: self-hosted
    steps:
      - name: Ejecutar tests de integración
        run: mvn -q --batch-mode failsafe:integration-test

  # --------------------- TESTS DE COBERTURA ---------------------
  tests_cobertura:
    needs: compilar_codigo
    runs-on: self-hosted
    steps:
      - name: Ejecutar cobertura con JaCoCo
        run: mvn -q --batch-mode test jacoco:report

  # --------------------- ANÁLISIS CON SONARQUBE ---------------------
  analisis_sonarqube:
    needs: [tests_unitarios, tests_integracion, tests_cobertura]
    runs-on: self-hosted
    steps:
      - name: Ejecutar análisis con SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "${{ secrets.SONAR_HOST_URL }}"
        run: mvn -q -B org.sonarsource.scanner.maven:sonar-maven-plugin:5.0.0.4389:sonar

  # --------------------- CREAR IMAGEN DOCKER (SIN Package) ---------------------
  crear_imagen_docker:
    needs: analisis_sonarqube  # ✅ Ahora depende de SonarQube directamente
    runs-on: self-hosted
    steps:
      - name: Construir imagen Docker con Spring Boot (sin package manual)
        run: mvn -q --batch-mode spring-boot:build-image

  # --------------------- DESPLEGAR EN SERVIDOR ---------------------
  desplegar_en_servidor:
    needs: crear_imagen_docker
    runs-on: self-hosted
    steps:
      - name: Desplegar contenedor en servidor
        run: docker compose -f compose-produccion.yaml up -d
