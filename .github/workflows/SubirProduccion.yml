name: Subida a Producción (Sin Cache Manual)

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # --------------------- PREPARAR ENTORNO ---------------------
  preparar_entorno:
    concurrency:
      group: produccion
      cancel-in-progress: true
    runs-on: self-hosted
    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          check-latest: false

  # --------------------- COMPILAR CÓDIGO ---------------------
  ejecucion_tests_y_sonarqube:
    needs: preparar_entorno
    runs-on: self-hosted
    steps:
      - name: Compilar código con `clean verify -Dclean-if-modified`
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -T16 clean verify jacoco:report sonar:sonar

  # --------------------- CREAR IMAGEN DOCKER ---------------------
  crear_imagen_docker:
    needs: ejecucion_tests_y_sonarqube
    runs-on: self-hosted
    env:
      VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'snapshot' }}
    steps:
      - name: Construir imagen Docker con versión dinámica
        run: >
          mvn spring-boot:build-image -DskipTests -Dspring-boot.build-image.imageName=buenaspracticas:${VERSION}

  # --------------------- DESPLEGAR EN SERVIDOR ---------------------

  desplegar_en_servidor:
    needs: crear_imagen_docker
    runs-on: self-hosted
    env:
      MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
      VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'snapshot' }}
      PUERTO_EXTERNO: ${{ vars.PUERTO_EXTERNO }}  # define esto en GitHub > Repository > Variables
    steps:
      - name: Desplegar contenedor en servidor
        run: docker compose -f compose-produccion.yaml up -d
