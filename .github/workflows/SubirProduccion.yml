name: Subida a Producción

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # --------------------- PREPARAR ENTORNO (Checkout + Cache + Setup Java) ---------------------
  preparar_entorno:
    concurrency:
      group: produccion
      cancel-in-progress: true
    runs-on: self-hosted
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Cache Maven dependencies (antes de clean)
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ runner.os }}-dependencies-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-dependencies

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Ejecutar Maven Clean
        run: mvn -q --batch-mode clean

      - name: Descargar dependencias (modo offline)
        run: mvn -q --batch-mode dependency:go-offline

  # --------------------- COMPILAR + TESTS ---------------------
  compilar_y_testear:
    needs: preparar_entorno
    runs-on: self-hosted
    steps:
      - name: Compilar código
        run: mvn -q --batch-mode compile

      - name: Ejecutar pruebas con cobertura JaCoCo
        run: mvn -q --batch-mode test jacoco:report

  # --------------------- ANÁLISIS CON SONARQUBE ---------------------
  analisis_sonarqube:
    needs: compilar_y_testear
    runs-on: self-hosted
    steps:
      - name: Ejecutar análisis con SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "${{ secrets.SONAR_HOST_URL }}"
        run: mvn -q -B sonar:sonar

  # --------------------- EMPAQUETAR ARTIFACTO ---------------------
  empaquetar_artifacto:
    needs: analisis_sonarqube
    runs-on: self-hosted
    steps:
      - name: Generar artefacto con Maven
        run: mvn -q --batch-mode package

  # --------------------- CREAR IMAGEN DOCKER (Corrección del Plugin) ---------------------
  crear_imagen_docker:
    needs: empaquetar_artifacto
    runs-on: self-hosted
    steps:
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            docker-${{ runner.os }}-

      - name: Construir imagen Docker con Spring Boot (Corrección de plugin)
        run: mvn -q --batch-mode spring-boot:build-image -Pproduction -DskipTests -Dspring-boot.build-image.publish=false -Dspring-boot.build-image.builder=paketobuildpacks/builder:tiny -Dspring-boot.build-image.runImage=paketobuildpacks/run:tiny -Dspring-boot.build-image.buildpacks.cache=/tmp/.buildx-cache

  # --------------------- DESPLEGAR EN SERVIDOR ---------------------
  desplegar_en_servidor:
    needs: crear_imagen_docker
    runs-on: self-hosted
    steps:
      - name: Desplegar contenedor en servidor
        run: docker compose -f compose-produccion.yaml up -d
