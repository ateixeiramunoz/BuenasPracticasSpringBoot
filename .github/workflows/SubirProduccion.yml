name: Subida a Producción (Sin Package)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # --------------------- PREPARAR ENTORNO ---------------------
  preparar_entorno:
    concurrency:
      group: produccion
      cancel-in-progress: true
    runs-on: self-hosted
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Verificar si Java 17 ya está instalado
        run: |
          if java -version | grep "17"; then
            echo "Java 17 ya está instalado, saltando setup-java"
          else
            echo "Instalando Java 17..."
            sudo apt update && sudo apt install -y openjdk-17-jdk
          fi

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-

      - name: Ejecutar Maven Clean (si hace falta)
        run: |
          if [ -d "target" ]; then
            echo "El directorio target ya existe, saltando clean..."
          else
            mvn -q --batch-mode clean
          fi

      - name: Usar repositorio Maven más rápido
        run: mvn -q --batch-mode -Dmaven.repo.local=/tmp/maven-repo dependency:go-offline

  # --------------------- COMPILAR CÓDIGO ---------------------
  compilar_codigo:
    needs: preparar_entorno
    runs-on: self-hosted
    steps:
      - name: Compilar código
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: mvn -q --batch-mode -T16 compile

  # --------------------- TESTS  ---------------------
  ejecutar_tests:
    needs: compilar_codigo
    runs-on: self-hosted
    steps:
      - name: Ejecutar todas las pruebas en paralelo con 16 hilos
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: mvn -q --batch-mode -T16 verify jacoco:report




  # --------------------- ANÁLISIS CON SONARQUBE ---------------------
  analisis_sonarqube:
    needs: [ejecutar_tests]
    runs-on: self-hosted
    steps:
      - name: Ejecutar análisis con SonarQube
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "${{ secrets.SONAR_HOST_URL }}"
        run: mvn -q -B -T16 org.sonarsource.scanner.maven:sonar-maven-plugin:5.0.0.4389:sonar

  # --------------------- CREAR IMAGEN DOCKER (SIN Package) ---------------------
  crear_imagen_docker:
    needs: analisis_sonarqube  # ✅ Ahora depende de SonarQube directamente
    runs-on: self-hosted
    steps:
      - name: Construir imagen Docker con Spring Boot (sin package manual)
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: mvn -q --batch-mode -T16 spring-boot:build-image -DskipTests

  # --------------------- DESPLEGAR EN SERVIDOR ---------------------
  desplegar_en_servidor:
    needs: crear_imagen_docker
    runs-on: self-hosted
    steps:
      - name: Desplegar contenedor en servidor
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: docker compose -f compose-produccion.yaml up -d
