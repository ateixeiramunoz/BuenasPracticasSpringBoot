name: Subida a Producción (Optimizado)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # --------------------- PREPARAR ENTORNO ---------------------
  preparar_entorno:
    concurrency:
      group: produccion
      cancel-in-progress: true
    runs-on: self-hosted
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          check-latest: false

      - name: Verificar si `C:\maven-repo` existe (Windows)
        shell: powershell
        run: |
          if (Test-Path "C:\maven-repo" -PathType Container -and (Get-ChildItem "C:\maven-repo")) {
              Write-Host "Repositorio Maven local encontrado, usando cache local."
          } else {
              Write-Host "Repositorio vacío o no existe, creando directorio..."
              New-Item -ItemType Directory -Path "C:\maven-repo" -Force
          }
  

  # --------------------- COMPILAR CÓDIGO ---------------------
  compilar_codigo:
    needs: preparar_entorno
    runs-on: self-hosted
    steps:
      - name: Compilar código con `clean verify -Dclean-if-modified`
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: mvn -q --batch-mode -T16 clean verify -Dclean-if-modified -Dmaven.repo.local=/tmp/maven-repo

  # --------------------- TESTS  ---------------------
  ejecutar_tests:
    needs: compilar_codigo
    runs-on: self-hosted
    steps:
      - name: Ejecutar todas las pruebas en paralelo con 16 hilos
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: mvn -q --batch-mode -T16 verify jacoco:report -Dsurefire.parallel=methods -Dsurefire.threadCount=16 -Dsurefire.forkCount=2 -Dsurefire.reuseForks=true -Dmaven.repo.local=/tmp/maven-repo

  # --------------------- ANÁLISIS CON SONARQUBE ---------------------
  analisis_sonarqube:
    needs: [ejecutar_tests]
    runs-on: self-hosted
    steps:
      - name: Ejecutar análisis con SonarQube
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "${{ secrets.SONAR_HOST_URL }}"
        run: mvn -q -B -T16 org.sonarsource.scanner.maven:sonar-maven-plugin:5.0.0.4389:sonar -Dmaven.repo.local=/tmp/maven-repo

  # --------------------- CREAR IMAGEN DOCKER (SIN Package) ---------------------
  crear_imagen_docker:
    needs: analisis_sonarqube  # ✅ Ahora depende de SonarQube directamente
    runs-on: self-hosted
    steps:
      - name: Construir imagen Docker con Spring Boot (sin package manual)
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: mvn -q --batch-mode -T16 spring-boot:build-image -DskipTests -Dmaven.repo.local=/tmp/maven-repo

  # --------------------- DESPLEGAR EN SERVIDOR ---------------------
  desplegar_en_servidor:
    needs: crear_imagen_docker
    runs-on: self-hosted
    steps:
      - name: Desplegar contenedor en servidor
        env:
          MAVEN_OPTS: "-Xmx4g -XX:MaxMetaspaceSize=8G"
        run: docker compose -f compose-produccion.yaml up -d
